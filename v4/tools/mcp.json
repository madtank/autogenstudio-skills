{
  "component_type": "tool",
  "name": "mcp",
  "description": "Universal access to Model Context Protocol (MCP) tools.\nAvailable servers:\n- brave-search: Web search capabilities\n- filesystem: File operations\n- playwright: Browser automation\n- youtube-transcript: Video transcript extraction\n\nExample commands:\n  mcp(server=\"brave-search\", tool=\"brave_web_search\", query=\"latest AI news\")\n  mcp(server=\"filesystem\", tool=\"list_directory\", path=\"/some/path\")",
  "content": "async def mcp(server: str, tool: str, query: str = None, path: str = None) -> str:\n    try:\n        import json\n        import asyncio\n        import os\n        from pathlib import Path\n        from mcp import ClientSession, StdioServerParameters\n        from mcp.client.stdio import stdio_client\n\n        # Load config\n        config_path = \"/Users/jacob/Library/Application Support/Claude/claude_desktop_config.json\"\n        npx_path = \"/opt/homebrew/bin/npx\"\n\n        with open(config_path) as f:\n            servers = json.load(f).get('mcpServers', {})\n\n        if server not in servers:\n            return f\"Error: Server {server} not found\"\n\n        # Build server config\n        config = servers[server]\n        command = npx_path if config['command'] == 'npx' else config['command']\n        env = os.environ.copy()\n        env.update(config.get('env', {}))\n\n        # Build arguments\n        args = {}\n        if query is not None:\n            args['query'] = query\n        if path is not None:\n            args['path'] = path\n\n        # Execute tool\n        async with stdio_client(StdioServerParameters(command=command, args=config.get('args', []), env=env)) as (read, write):\n            async with ClientSession(read, write) as session:\n                await session.initialize()\n                result = await session.call_tool(tool, arguments=args)\n                return str(result)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
  "tool_type": "PythonFunction"
}