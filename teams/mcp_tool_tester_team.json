{
  "version": "1.0.0",
  "component_type": "team",
  "name": "mcp_tester_team",
  "participants": [
    {
      "component_type": "agent",
      "name": "assistant_agent",
      "agent_type": "AssistantAgent",
      "system_message": "You are a helpful assistant. Solve tasks carefully. You have a tool called MCP, this is USB for llm context, it's a set of tools. You will be asked to do MCP tools tests and validate the different options you can use with them. When the task is done respond with TERMINATE.",
      "model_client": {
        "component_type": "model",
        "model": "gpt-4o-2024-08-06",
        "model_type": "OpenAIChatCompletionClient"
      },
      "tools": [
        {
          "component_type": "tool",
          "name": "mcp",
          "description": "Dynamic MCP (Model Context Protocol) client that provides access to various server capabilities.\n\nThis tool follows a discovery-first approach. To use it effectively:\n\n1. List available servers:\n   await mcp(tool='list_available_servers')\n\n2. Discover tools for a specific server:\n   await mcp(server='server_name', tool='tool_details')\n\n3. Execute a specific tool:\n   await mcp(\n       server='server_name',\n       tool='tool_name',\n       arguments={'param1': 'value1', 'param2': 'value2'}\n   )\n\nCommon Examples:\n- Web Search: \n  await mcp(server='brave-search', tool='brave_web_search', arguments={'query': 'search terms'})\n- File Operations:\n  await mcp(server='filesystem', tool='read_file', arguments={'path': '/path/to/file'})\n\nAlways check tool availability and details before use as capabilities may change.",
          "content": "async def mcp(server: str = None, tool: str = None, arguments: dict = None):\n    \"\"\"\n    Dynamic MCP client that adapts to available server capabilities.\n\n    Args:\n        server: Name of the MCP server to use\n        tool: Name of the tool to execute or special commands:\n              - 'list_available_servers': List available servers\n              - 'tool_details': Get tool information for a server\n        arguments: Dictionary of tool-specific arguments\n\n    Returns:\n        Tool execution results or discovery information\n    \"\"\"\n    try:\n        import json\n        import asyncio\n        import os\n        import platform\n        from pathlib import Path\n        from mcp import ClientSession, StdioServerParameters\n        from mcp.client.stdio import stdio_client\n\n        # Check multiple config locations\n        possible_paths = [\n            Path('mcp_config.json'),  # Current directory\n            Path.home() / '.config' / 'autogen' / 'mcp_config.json',  # User config dir\n            Path(os.getenv('MCP_CONFIG_PATH', 'mcp_config.json')),  # Environment variable\n        ]\n\n        config_path = None\n        for path in possible_paths:\n            if path.exists():\n                config_path = path\n                break\n\n        if not config_path:\n            paths_checked = '\\n'.join(str(p) for p in possible_paths)\n            return f\"Error: No configuration file found. Checked:\\n{paths_checked}\"\n\n        # Get system-specific npx path\n        system = platform.system()\n        if system == \"Darwin\":  # macOS\n            default_npx = Path(\"/opt/homebrew/bin/npx\")\n        elif system == \"Windows\":\n            default_npx = Path(os.getenv(\"APPDATA\")) / \"npm/npx.cmd\"\n        else:  # Linux and others\n            default_npx = Path(\"/usr/local/bin/npx\")\n\n        # Find npx in PATH if default doesn't exist\n        npx_path = str(default_npx if default_npx.exists() else \"npx\")\n\n        # Load config\n        with open(config_path) as f:\n            config_data = json.load(f)\n            servers = config_data.get('mcpServers', {})\n\n        # Handle list_available_servers\n        if tool == 'list_available_servers':\n            enabled_servers = [name for name, cfg in servers.items() if cfg.get('enabled', True)]\n            return json.dumps(enabled_servers, indent=2)\n\n        # Validate server\n        if not server:\n            return \"Error: Server parameter required for tool operations\"\n        if server not in servers:\n            return f\"Error: Server {server} not found\"\n        if not servers[server].get('enabled', True):\n            return f\"Error: Server {server} is disabled in configuration\"\n\n        # Build server connection\n        config = servers[server]\n        command = npx_path if config['command'] == 'npx' else config['command']\n        env = os.environ.copy()\n        env.update(config.get('env', {}))\n\n        arguments = arguments or {}\n\n        # Connect to server and execute tool\n        async with stdio_client(StdioServerParameters(\n            command=command, \n            args=config.get('args', []), \n            env=env\n        )) as (read, write):\n            async with ClientSession(read, write) as session:\n                await session.initialize()\n\n                # Handle tool_details\n                if tool == 'tool_details':\n                    result = await session.list_tools()\n                    return json.dumps([{\n                        'name': t.name,\n                        'description': t.description,\n                        'input_schema': t.inputSchema\n                    } for t in result.tools], indent=2)\n\n                # Execute requested tool\n                if not tool:\n                    return \"Error: Tool name required\"\n\n                result = await session.call_tool(tool, arguments=arguments)\n                return str(result)\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"",
          "tool_type": "PythonFunction"
        }
      ]
    }
  ],
  "team_type": "RoundRobinGroupChat",
  "termination_condition": {
    "component_type": "termination",
    "termination_type": "TextMentionTermination",
    "text": "TERMINATE"
  }
}